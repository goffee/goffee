<ol class="breadcrumb">
  <li><a href="/">Home</a></li>
  <li class="active">About</li>
</ol>

<div class="about-header">
  <h1>
    How is Goffee Made?
  </h1>
  <h4>Goffee is mostly written in Go!</h4>
</div>

<div class="row">
  <div class="col-md-6">
    <h3>Libraries, Frameworks, and other 3rd components</h3>
    <p>
      The web UI is built on top of Goji and go templates. For templating we
      elected to use Go HTML templates. The site styles are based on Bootstrap 3
      and the Superhero theme from Bootswatch. Client-side templates are rendered
      with Handlebars.js.
    </p>

    <h3>Hosting</h3>
    <p>
      Goffee is gosted on the Google Cloud Platform, using the Google Container
      Engine service. The web UI is fronted by Cloudflare. In addition to this we
      also have an IP reflector service hosted on Heroku.
    </p>
    <p>
      While Goffee has many components (as you can see in the diagram/description
      below), it is possible to host these on a single server. Aside from MySQL,
      Redis, and the Tor daemon, all the components ship as a single package
      (which can be run in different modes).
    </p>
  </div>

  <div class="col-md-6">
    <div class="well">
      <ul>
        <li>Go 1.4</li>
        <li>Tor 0.2.5</li>
        <li>Web Framework: Goji</li>
        <li>ORM: GORM</li>
        <li>HTML templates: Go templates</li>
        <li>Web UI styles: Bootstrap 3 &amp; the Superhero theme from Bootswatch</li>
        <li>Client side JS: jQuery, Moment.js, Happy.js, Handlebars.js</li>
        <li>KV-Store: Redis</li>
        <li>Database: MySQL</li>
        <li>Signins: OAuth 2 &amp; GitHub</li>
      </ul>
    </div>
  </div>
</div>

<div class="row" id="diagram">
  <div class="col-md-12">
    <h3>Diagram of the components</h3>
    <img src="/images/goffee-diagram.svg" onerror="this.onerror=null;this.src='/images/goffee-diagram.png'">
  </div>
</div>

<div class="row equal">
  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">Tor <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Probes all run their requests through the Tor network, periodically
        switching exit nodes. This allows Goffee to check the availability of
        the checked sites from multiple geographical locations.
      </div>
    </div>
  </div>
  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Queue <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Queue is used for coordination between the different end points. The
        actual data for the queue is stored in a Redis key-value store.
      </div>
    </div>
  </div>

  <div class="clearfix visible-sm-block"></div>

  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Probes <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Probes take jobs off the queue which tell them what URL needs to be
        checked via Tor. The results from these checks are placed back on a
        queue for the Writer.
      </div>
    </div>
  </div>
  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Scheduler <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Scheduler places jobs on to the queue on a fixed schedule (about
        once per minute per check). Using the scheduler and Queue we can ensure
        that multiple probes don't end up simultaneously checking the health of
        the same URL.
      </div>
    </div>
  </div>
</div>

<div class="row equal">
  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Writer <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Writer pops results off a queue and writes them to the Database.
        If there has been a change of state (success to failure, or failure to
        success) a job is added on the Queue for the Notifier.
      </div>
    </div>
  </div>

  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Notifier <span class="gosticker gocolor">GO</span></h3>
      </div>
      <div class="panel-body">
        The Notifier pops botifications off the Queue and sends the notifications
        to the owners of the checks. Currently only email notifications are
        supported, but in the future it would be possible to add, for example,
        SMS notifications.
      </div>
    </div>
  </div>

  <div class="clearfix visible-sm-block"></div>

  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">The Database <span class="gosticker sqlcolor">SQL</span></h3>
      </div>
      <div class="panel-body">
        The checks and their results are stored in a MySQL database.
      </div>
    </div>
  </div>

  <div class="col-sm-6 col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">Web UI <span class="gosticker gocolor">GO</span> <span class="gosticker htmlcolor">HTML</span> <span class="gosticker jscolor">Javascript</span></h3>
      </div>
      <div class="panel-body">
        The Web UI displays checks and results from the MySQL database and
        presents it to the users. Users can add new checks to the database via
        the Web UI.
      </div>
    </div>
  </div>
</div>
